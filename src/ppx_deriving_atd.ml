open Ppxlib

(* Some design decisions:
   - ignoring names lookup (in ATD): each deriving is done on a particular type so will not have stubs defined for any non-primitive types. checks on types are done by the OCaml compiler.
   - to generate ATD ASTs from OCaml AST? or emit OCaml functions directly? Generating ATD ASTs is slightly more disciplined and easier.
   - do we need another level of module now? X_j.of_string and X_j.to_string? or stick to top-level x_j_to_string and x_j_of_string. Keeping it top-level for ease of use.

   - another way to avoid global transformation is to only allow deriving atd from a module--this will make sure all the type definitions are processed and then exported in one go
*)

let let_str_generator loc s =
  let name = "__EXPORT_ATD_STRING" in
  let pvar = Ast_builder.Default.pvar ~loc name in
  let evar = Ast_builder.Default.evar ~loc name in
  let expr = Ast_builder.Default.estring ~loc s in
  [%stri
    let [%p pvar] = [%e expr] in
    __add_to_export_list [%e evar]]

let print_location { loc_start; loc_end; _ } =
  Atd.Ast.string_of_loc (loc_start, loc_end)

let generate_impl_atd ~ctxt (_rec_flag, type_decls) =
  let loc = Expansion_context.Deriver.derived_item_loc ctxt in
  let type_defs =
    (List.concat_map (Convert.type_def_of_type_declaration loc))
      type_decls
  in

  let atd_strings =
    let type_strs = Export.export_module_body_string type_defs in
    (* better way to do this? have to keep output in code :/ *)
    List.map (let_str_generator loc) type_strs
  in

  List.concat [ atd_strings ]

(* Context_free transformation (Derivers) are executed before global transformation phase--so we setup some artifacts for the global derivers so that a file can be exported by the global deriver. *)
let collect_atd_strings_and_export strs =
  let loc = Location.none in
  let atd_export_init =
    let gen_string =
      Printf.sprintf
        "(*** GENERATED BY PPX_DERIVING_ATD *** DO NOT EDIT ***)"
    in
    [
      [%stri
        let __ATD_EXPORT_LIST =
          ref [ [%e Ast_builder.Default.estring ~loc gen_string] ]];
      [%stri
        let __add_to_export_list s =
          __ATD_EXPORT_LIST := s :: !__ATD_EXPORT_LIST];
      [%stri
        let atd_file_string () =
          String.concat "\n" (List.rev !__ATD_EXPORT_LIST)];
      [%stri
        let export_atd_file filename =
          let atd_string = atd_file_string () in
          let handler = Stdlib.open_out filename in
          Stdlib.output_string handler atd_string];
      [%stri let _ = export_atd_file (* disable unused warning *)];
      [%stri let print_atd_file () = print_endline (atd_file_string ())];
      [%stri let _ = print_atd_file (* disable unused warning *)];
      [%stri type 'a wrap (* support wrapping types *)];
    ]
  in
  atd_export_init @ strs

let name = "atd"

let deriver =
  Driver.register_transformation ~impl:collect_atd_strings_and_export
    "atd_export";
  Deriving.add name
    ~str_type_decl:(Deriving.Generator.V2.make_noarg generate_impl_atd)
